---
title: "HW3: Expectation and Variance"
format: pdf
editor: visual
author: Carmen Martin
---

```{r}
library(tidyverse)
library(ggplot2)
library(dplyr)

```

Plot UnitPizza distribution kernel

```{r}
# Define the function
curve <- function(x) {
  sqrt(1 - x^2)
}

# Create a sequence of x values from 0 to 1
x <- seq(0, 1, length.out = 100)

# Compute the corresponding y values
y <- curve(x)

# Plot the function
plot(x, y, type = "l", col = "red", lwd = 2, 
     xlab = "x", ylab = "f(x)", 
     main = expression(sqrt(1 - x^2)))

```

```{r}

#creating bivariate sequences

y1 <- runif(100, min = 0, max = 1)
x1 <- runif(100, min = 0, max = 1)

# adding points to the function

plot(x, y, type = "l", col = "red", lwd = 2, 
     xlab = "x", ylab = "f(x)", 
     main = expression(sqrt(1 - x^2)))+
  points(x1, y1, col = "blue", pch = 19)+
  box(col = "purple", lwd = 2)


```


```{r}
set.seed(123)  # For reproducibility


#Generate 10 random points 

px <- runif(10, min = 0 , max = 1)
py <- runif(10, min = 0, max = 1 )

pxy <- data.frame(px, py)
print(pxy)

# Function to generate UnitPizza random variables that fit the parameters
unit_pizza <- function(n) {
  x <- runif(n, 0, 1)
  y <- runif(n, 0, 1)
  df <- data.frame(x = x, y = y)
  df <- df[(x^2 + y^2) <= 1, ]
  return(df)
}


# Generate and print 10 random variables
df_10 <- unit_pizza(10)
print(df_10)


# Generate 1,000,000 random variables
df_1M <- unit_pizza(1000000)

# Plot histogram of x and y values
ggplot(df_1M, aes(x = x)) +
  geom_histogram(binwidth = 0.01, fill = "blue", alpha = 0.7) +
  labs(title = "Histogram of x values in UnitPizza",
       x = "x",
       y = "Frequency")

ggplot(df_1M, aes(x = y)) +
  geom_histogram(binwidth = 0.01, fill = "purple", alpha = 0.7) +
  labs(title = "Histogram of y values in QuarterUnitPizza",
       x = "y",
       y = "Frequency")


```


```{r}

# Assuming you have already filtered your samples
# PI is the number of points inside the quarter circle
# PG is the total number of points generated

px2 <- runif(1000000, min = 0 , max = 1)
py2 <- runif(1000000, min = 0, max = 1 )

pxy2 <- data.frame(px2, py2)

filtered_pxy2 <- unit_pizza(1000000)

estimate_pi_filtered <- function(PI, PG) {
  pi_estimate <- 4 * (PI / PG)
  return(pi_estimate)
}

nrow(filtered_pxy2)

# Defining the parameters for the loop
PI <- nrow(filtered_pxy2)  # Number of points inside the quarter circle
PG <- nrow(pxy2)  # Total number of points generated
pi_estimate <- estimate_pi_filtered(PI, PG)
print(paste("Estimated value of π:", pi_estimate))


```


```{r}

intfuns <- function(x){
  sqrt(1- x^2)
}

area <- integrate(intfuns, lower = 0, upper = 1)

pi_estamate2 <- area$value *4
print(paste("Estimated value of π:",pi_estamate2))

```


```{r}

# FIXME

#this is for Var(x)
# mu should be the value u got from first integrate E(X-mu)^2, 

# values for the G section will be the filtered values from the unit circle. The values you get with mean and shit, the answer should be similar to the numbers you got in Question F

K <- integrate(intfuns, lower = 0 , upper = 1)$value

f_normalized <- function(x) {
  (1 / K) * (1 - x^2)^(-1/2)
}


E_X <- integrate(function(x) x * f_normalized(x), lower = 0, upper = 1)$value
E_X2 <- integrate(function(x) x^2 * f_normalized(x), lower = 0, upper = 1)$value
Var_X <- E_X2 - (E_X)^2

print(paste("E(X) =", E_X ))
print(paste("Var(X) =", Var_X ))


```


```{r}

# FIX ME 
# accounting for the PDF
weights <- f_normalized(df_1M$x)

# Calculate the mean and variance that are normalized with the 1\k 
E_X_mc <- mean(df_1M$x * weights)
Var_X_mc <- var(df_1M$x * weights)

print(paste("E_X_mc =", E_X_mc))
print(paste("Var_X_mc =", Var_X_mc ))


```

